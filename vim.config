filetype plugin on
set tabstop=4 softtabstop=0 expandtab shiftwidth=2 smarttab
set rnu
set number
set hlsearch

autocmd Filetype go setlocal tabstop=4 shiftwidth=4 softtabstop=4

runtime macros/matchit.vim


if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'dense-analysis/ale'
Plug 'psf/black'
Plug 'elmcast/elm-vim', {'for': 'elm'}
Plug 'leafgarland/typescript-vim'
Plug 'zah/nim.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'chemzqm/vim-jsx-improve'
Plug 'jparise/vim-graphql'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
Plug 'chrisbra/Colorizer'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'fannheyward/coc-pyright',
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'vim-perl/vim-perl', { 'for': 'perl', 'do': 'make clean carp highlight-all-pragmas moose test-more try-tiny method-signatures' }
call plug#end()

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

autocmd BufEnter,BufLeave *.tsx,*.css,*.config :ColorHighlight!

let g:loaded_zipPlugin= 1                                               
let g:loaded_zip      = 1     

function! Pest()
  !perl *.t | less
endfunction

:command Pest :call Pest()


command -range=% -nargs=* PerltidyCommand <line1>,<line2>!perltidy

fun Perltidy()
    let l = line(".")
    let c = col(".")
    :PerltidyCommand
    call cursor(l, c)
endfun

:command Perltidy :call Perltidy()

  let g:ale_linters = {
        \   'perl': ['null'],
        \}

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction


" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

nnoremap ` :call fzf#run(fzf#wrap({'source': 'find ~/jix/jobxx -type f' }))<cr>

:highlight CocErrorFloat ctermfg=black
