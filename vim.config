filetype plugin on
set tabstop=4 softtabstop=0 expandtab shiftwidth=2 smarttab
set rnu
set number
set hlsearch

autocmd Filetype go setlocal tabstop=4 shiftwidth=4 softtabstop=4

runtime macros/matchit.vim


if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'dense-analysis/ale'
Plug '~/dev-utils/conf/vim'
Plug 'neomake/neomake'
Plug 'psf/black'
Plug 'elmcast/elm-vim', {'for': 'elm'}
Plug 'leafgarland/typescript-vim'
Plug 'zah/nim.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'chemzqm/vim-jsx-improve'
Plug 'jparise/vim-graphql'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
Plug 'chrisbra/Colorizer'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'fannheyward/coc-pyright',
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'vim-perl/vim-perl', { 'for': 'perl', 'do': 'make clean carp highlight-all-pragmas moose test-more try-tiny method-signatures' }
Plug 'janko-m/vim-test'
Plug 'yko/mojo.vim'
Plug 'neovim/nvim-lspconfig'
Plug 'posva/vim-vue'
call plug#end()

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

autocmd BufEnter,BufLeave *.tsx,*.css,*.config :ColorHighlight!

let g:loaded_zipPlugin= 1                                               
let g:loaded_zip      = 1     

function! Pest()
  !perl *.t | less
endfunction

:command Pest :call Pest()


command -range=% -nargs=* PerltidyCommand <line1>,<line2>!perltidy

fun Perltidy()
    let l = line(".")
    let c = col(".")
    :PerltidyCommand
    call cursor(l, c)
endfun

:command Perltidy :call Perltidy()

  let g:ale_linters = {
        \   'perl': ['null'],
        \}

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"


set pastetoggle=<F12>
nnoremap ` :call fzf#run(fzf#wrap({'source': 'find ~/jix/jobxx ~/jobxx ~/robot ~/dev-utils -type f' }))<cr>

highlight CocErrorFloat ctermfg=black
highlight CocMenuSel ctermbg=gray

""" Customize colors
highlight FgCocFloating ctermfg=White ctermbg=White guifg=White guibg=White

lua <<EOF

local jix_lsp = require 'jix.lsp'

-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }
vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
    -- Enable completion triggered by <c-x><c-o>
    vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
    -- Mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    local bufopts = { noremap=true, silent=true, buffer=bufnr }
    -- Go to definition
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
    -- Show perldoc for function under cursor
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
    -- Show list of function in current module (kræver FZF)
    -- vim.keymap.set('n', 'f', jix_lsp.document_functions, bufopts)
    -- Show signature for function under cursor (virker i skrivende stund ikke med subroutine signatures)
    --vim.keymap.set('n', 'fp', vim.lsp.buf.signature_help, bufopts)
    -- Format file with perltidy
    vim.keymap.set('n', '<leader>f', vim.lsp.buf.formatting, bufopts)
    -- Format visual selection with perltidy
    vim.keymap.set('v', '<leader>f', vim.lsp.buf.range_formatting, bufopts)

    -- Slå Neomake fra i buffer for at undgå dobbeltarbejde
    vim.api.nvim_command('silent NeomakeDisableBuffer')
end

local config = {
    cmd = { 'jix-shell', 'pls' },
    settings = {
        -- Se https://metacpan.org/pod/PLS#OPTIONS for mulige options
        perl = {}
    },
    on_attach = on_attach,
    handlers = jix_lsp.handlers,
}

require 'lspconfig'.perlpls.setup(config)
